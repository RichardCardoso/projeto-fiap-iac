name: "Terraform Apply"

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  TF_CLOUD_ORGANIZATION: "projeto-fiap-64"
  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_WORKSPACE: "projeto-fiap-iac-infra"
  CONFIG_DIRECTORY: "./"
  AWS_DEFAULT_REGION: 'us-east-1'
  CLUSTER_NAME: 'projeto-fiap'
  LAMBDA_REPO_URL: ${{ vars.LAMBDA_REPO_URL }}
  API_NAME: "ProjetoFiapAPI"
  STAGE_NAME: "prod"

jobs:
  terraform:
    if: github.repository != 'hashicorp-education/learn-terraform-github-actions'
    name: "Terraform Apply"
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Zip Lambda Repo's Code
        run:  |
              git clone $LAMBDA_REPO_URL
              REPO_NAME=$(echo "$LAMBDA_REPO_URL" | awk -F'/' '{print $NF}' | cut -d. -f1)
              cd $REPO_NAME
              ls
              zip ../deployment.zip *.mjs

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: apply-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}

      - name: Create Apply Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: apply-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.apply-upload.outputs.configuration_version_id }}

      - name: Apply
        uses: hashicorp/tfc-workflows-github/actions/apply-run@v1.0.0
        if: fromJSON(steps.apply-run.outputs.payload).data.attributes.actions.IsConfirmable
        id: apply
        with:
          run: ${{ steps.apply-run.outputs.run_id }}
          comment: "Apply Run from GitHub Actions CI ${{ github.sha }}"

  deploy-app:
    needs: terraform
    runs-on: ubuntu-latest
    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Setup Kubectl CLI
      run:  |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

    - name: Setup Kubeconfig
      run:  |
            aws eks update-kubeconfig --region $AWS_DEFAULT_REGION --name $CLUSTER_NAME

    - name: Deploy to kubernetes cluster
      run:  |
            kubectl apply -f ./kubernetes

    - name: Retrieve Api Invoke URL
      run: |
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='${{ env.API_NAME }}'].id" --output text)
        INVOKE_URL="https://$API_ID.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${{ env.STAGE_NAME }}/"

        echo "EXTERNAL_HOSTNAME=$INVOKE_URL" >> $GITHUB_ENV

    - name: Set repository website URL
      env:
        EXTERNAL_HOSTNAME: ${{ env.EXTERNAL_HOSTNAME }}
      run: |
        WEBSITE_URL="$EXTERNAL_HOSTNAME%//swagger-ui/index.html#/"
        REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
        REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)

        curl -L \
            -X PATCH \
            -H "Accept: application/vnd.github.v3+json" \
            -H "Authorization: token ${{ secrets.GH_API_TOKEN }}" \
            "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME" \
            -d "{\"name\": \"$REPO_NAME\", \"homepage\": \"$WEBSITE_URL\"}"


