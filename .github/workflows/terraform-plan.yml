name: "Terraform Plan"

on:
  pull_request:
  workflow_dispatch:

env:
  TF_CLOUD_ORGANIZATION: "projeto-fiap-64"
  TF_WORKSPACE: "projeto-fiap-iac-infra"
  CONFIG_DIRECTORY: "./"
  API_NAME: "ProjetoFiapAPI"
  STAGE_NAME: "prod"
  AWS_DEFAULT_REGION: 'us-east-1'
  CLUSTER_NAME: 'projeto-fiap'

  LAMBDA_REPO_URL: ${{ vars.LAMBDA_REPO_URL }}

  TF_API_TOKEN: "${{ secrets.TF_API_TOKEN }}"
  TF_VAR_db_cluster_name: ${{ vars.DB_CLUSTER_NAME }}
  TF_VAR_db_name: ${{ vars.DB_NAME }}
  TF_VAR_db_username: ${{ vars.DB_USERNAME }}
  TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}

  DB_CLUSTER_NAME: ${{ vars.DB_CLUSTER_NAME }}
  DB_NAME: ${{ vars.DB_NAME }}
  DATASOURCE_USERNAME: ${{ vars.DB_USERNAME }}
  DATASOURCE_PASSWORD: ${{ secrets.DB_PASSWORD }}

jobs:
  terraform:
    name: "Terraform Plan"
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Lambda Repo Code Zip
        run:  |
              git clone $LAMBDA_REPO_URL
              REPO_NAME=$(echo "$LAMBDA_REPO_URL" | awk -F'/' '{print $NF}' | cut -d. -f1)
              cd $REPO_NAME
              ls
              zip ../deployment.zip *.mjs

      - name: Upload Configuration
        uses: hashicorp/tfc-workflows-github/actions/upload-configuration@v1.0.0
        id: plan-upload
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          directory: ${{ env.CONFIG_DIRECTORY }}
          speculative: true

      - name: Create Plan Run
        uses: hashicorp/tfc-workflows-github/actions/create-run@v1.0.0
        id: plan-run
        with:
          workspace: ${{ env.TF_WORKSPACE }}
          configuration_version: ${{ steps.plan-upload.outputs.configuration_version_id }}
          plan_only: true

      - name: Get Plan Output
        uses: hashicorp/tfc-workflows-github/actions/plan-output@v1.0.0
        id: plan-output
        with:
          plan: ${{ fromJSON(steps.plan-run.outputs.payload).data.relationships.plan.data.id }}

      - name: Update PR
        uses: actions/github-script@v6
        id: plan-comment
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Cloud Plan Output')
            });
            const output = `#### Terraform Cloud Plan Output
               \`\`\`
               Plan: ${{ steps.plan-output.outputs.add }} to add, ${{ steps.plan-output.outputs.change }} to change, ${{ steps.plan-output.outputs.destroy }} to destroy.
               \`\`\`
               [Terraform Cloud Plan](${{ steps.plan-run.outputs.run_link }})
               `;
            // 3. Delete previous comment so PR timeline makes sense
            if (botComment) {
              github.rest.issues.deleteComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
              });
            }
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            });

  kubernetes-validation:
    needs: terraform
    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup AWS CLI
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
        aws-region: ${{ env.AWS_DEFAULT_REGION }}

    - name: Setup Kubectl CLI
      run:  |
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
            kubectl version --client

    - name: Retrieve db URL
      run:  |
        URL=$(aws rds describe-db-instances --db-instance-identifier $DB_CLUSTER_NAME --query 'DBInstances[0].Endpoint.Address' --output text)
        echo "DB_URL=$URL" >> $GITHUB_ENV

    - name: Replace db connection info in app-secret.yaml
      run:  |
        sed -i 's@SPRING_DATASOURCE_URL: .*@SPRING_DATASOURCE_URL: jdbc:postgresql://${DB_URL}:5432/${DB_NAME}@g' kubernetes/app-secret.yaml
        sed -i 's@SPRING_DATASOURCE_USERNAME: .*@SPRING_DATASOURCE_USERNAME: ${DATASOURCE_USERNAME}'
        sed -i 's@SPRING_DATASOURCE_PASSWORD: .*@SPRING_DATASOURCE_PASSWORD: ${DATASOURCE_USERNAME}'
        cat kubernetes/app-secret.yaml

    - name: Retrieve Api Invoke URL
      run: |
        API_ID=$(aws apigateway get-rest-apis --query "items[?name=='${{ env.API_NAME }}'].id" --output text)
        INVOKE_URL="https://$API_ID.execute-api.${{ env.AWS_DEFAULT_REGION }}.amazonaws.com/${{ env.STAGE_NAME }}/"

        echo "EXTERNAL_HOSTNAME=$INVOKE_URL" >> $GITHUB_ENV

    - name: Set repository website URL
      env:
        EXTERNAL_HOSTNAME: ${{ env.EXTERNAL_HOSTNAME }}
      run: |
        WEBSITE_URL="${EXTERNAL_HOSTNAME}swagger-ui/index.html#/"
        REPO_OWNER=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f1)
        REPO_NAME=$(echo "$GITHUB_REPOSITORY" | cut -d'/' -f2)

        echo $WEBSITE_URL
        echo $REPO_OWNER
        echo $REPO_NAME